PVC作为用户对存储资源的需求申请，主要包括存储空间请求、访问模式、PV选择条件和存储类别等信息设置。

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: myclaim
spec:
  accessMode:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
  storageClassName: slow
  selector:
    matchLabels:
       release: "stable"
    matchExpressions:
       - {key: environment, operator: In, values: [dev]}


资源请求(resource): 描述对存储资源的请求，目前仅支持request.storage的设置，即存储空间大小。
访问模式(access modes): PVC也可以设置访问模式，用于描述用户应用对存储资源的访问权限。
PV选择条件(selector): 通过label selector 的设置，可使PVC对于系统中已存在的各种PV进行筛选。系统将根据标签选择出合适的PV与该PVC进行绑定。选择条件可以使用matchLabels和matchExpressions进行设置，如果两个字段都设置了，则selector的逻辑将是两组条件同时满足才能完成匹配。
存储类别(Class): PVC在定义时可以设定需要的后端存储的“类别”，通过storageClassName字段指定，以降低对后端存储特性的详细信息依赖。只有设置了该class的PV才能被系统选出，并与该PVC进行绑定。

PVC也可以不设置Class需求。如果storageClassName字段都设置为空storageClassName="" 则表示该PVC不要求特定的Class,系统将只选择未设定Class的PV与之匹配和绑定。PVC也可以完全不设置storageClassName字段，此时将根据系统是否启用了名为“DefaultStorageClass”的admission controller进行相应的操作。

1.未启用DefaultStorageClass: 等效于PVC设置storageClassName的值为空，即只能选择未设定Class的PV与之匹配和绑定。
2.启用DefaultStorageClass: 要求集群管理员已定义默认的storageClass.如果系统中不存在默认的StorageClass,则系统将自动为PVC创建一个PV,使用默认storageClass的后端存储，并将它们进行绑定。集群管理员设置默认storageclass的方法为，在storageClass的定义中加上一个annotation "storageclass.kubernetes.io/is-default-class=true".如果管理员将多个StorageClass都定义为default，则由于不唯一，系统将无法为PVC创建相应的PV.


注意：PVC和PV都受限于namespace，PVC在选择PV时受到namespace的限制，只有相同的namespace中的PV才能与PVC绑定。Pod在引用PVC时同样受namespace的限制，只有相同namespace中的PVC才能挂载到pod内。


当Selector和Class都进行了设置时，系统将选择两个条件同时满足的PV与之匹配。

如果资源资源供应使用的是动态模式，即没有预先定义PV,仅通过storageClass交给系统自动完成PV的动态创建，那么PVC再设定selector时，系统将无法为其供应任何存储资源了。



PV和PVC的生命周期
PV可以看做可用的存储资源，PVC则是对存储资源的请求，PV和PVC的相互关系遵循
storage----->PV------>PVC------>pod


