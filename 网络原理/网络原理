kubernetes 的网络模型是什么？
docker 背后的网络基础是什么？
docker自身的网络模型和局限？
kubernetes 的网络组建之间是怎么通信的？
外部如何访问kubernetes集群？
有哪些开源的组件支持kubernetes的网络模型？

kubernetes网络模型设计的基础是，每个pod都拥有一个独立的ip地址，而且假定所有的pod都在一个直接连通的、扁平的网络空间中。所以不管他们是否运行在同一个node中，都要求他们可以直接通过对方的ip进行访问。设计这个原则的原因是，用户不需要额外考虑如何建立pod之间的连接，也不需要考虑将容器端口映射到主机端口等问题。


ip是以pod为单位进行分配的。一个pod内部所有容器共享一个网络堆栈(实际上就是一个网络命名空间，包括他们的IP地址、网络设备、配置等都是共享的)。按照这个网络原则抽象出来的一个pod一个ip的设计模型被称作ip-per-pod模型


由于kubernetes的网络模型假设pod之间访问时使用的是对方的pod的实际地址，所以一个pod内部的应用程序看到自己的IP地址和端口与集群内其他pod看到的一样。他们都是pod实际分配的ip地址。将ip地址和端口在pod内部和外部保持一致，我们可以不使用nat来进行转换，地址空间也自然是平的。


一个pod一个ip的模型还有另外一层含义，那就是同一个pod内的不同容器将会共享一个网络命名空间，也就是说同一个Linux网络协议栈。这就意味着同一个pod内的容器可以通过localhost来连接对方的端口。这种关系和同一个VM内的进程之间的关系是一样的。这样做的好处是pod的内的容器是共享部分资源的，通过共享资源互相通信显然更加容易和高效。针对这些应用，虽然损失了可接受范围内的部分隔离性，但也是值得的。


ip-per-ip模式和docker原生的通过动态端口映射方式实现的多节点访问模式有什么区别呢？主要区别是后者的动态端口映射会引入端口管理的复杂性，而且访问者看到的ip地址和端口与服务提供者实际绑定的不同。
